问题：有一个三维迷宫，每个迷宫的点都用三维坐标（x,y,z)表示。主人公每次行走只能走到上、下、左、右、前、后与主人公所在点相邻的位置，即从（x,y,z)点行走
至（x-1, y,z),(x+1,y,z),(x,y+1,z),(x,y-1,z),(x,y,z-1),(x,y,z+1)六个点中的其中一个。在这其中还存在一些墙，主人公在任何情况下都不能走到墙所在
的位置上。求从点（0，0，0）走到点（A-1，B-1，C-1）最少需要几步。

首先分析这个看似更加高级的查找问题。

查找空间：该题的查找空间中的元素不再是之前例题中的一个数或者几个数。它由所有从点（0，0，0）到点（A-1，B-1，C-1）合法的行走路径组成。
查找目标：在查找空间的所有路径中寻找一条最短的路径，即行走步数最少的路径。
查找方法：与以往相比，在广度优先搜索中的查找方法变得有些特殊，他不再机械的遍历查找空间中的所有路径，而是采用了某种策略。

在探讨这种特殊的查找方法之前，先指明该问题的状态。为了能够考虑搜索的问题，我们常在搜索问题中指明状态，从而使搜索问题变成对状态的搜索。在本问题中，由于
需要查找从起点到终点的最短耗时，设定状态（x,y,z,t)为四元祖，其中（x,y,z)为某个点的坐标，t为从（0，0，0）点走到该点所耗费的时间。在指明该问题的状态
之后，查找的几个相关要素也相应的发生改变。

查找空间：也被称为搜索空间，从之前的所有路径变为对所有状态的搜索，即所有可能出现的四元组（x,y,z,t)。
查找目标：也被称为搜索目标，即在所有的状态中搜索这样的一个四元组（x,y,z,t),其中x,y,z分别等于A-1，B-1，C-1，t为达到这个状态所需要的最少时间。
查找方法：通过状态的扩展来遍历查找所有的状态。

```

#include <iostream>
#include<queue>

using namespace std;

struct State{
    int x,y,z;
    int t;
};
int maze[55][55][55];
bool mark[55][55][55];
queue<State> Q;
int a,b,c,t;

int dir[][3]={
    1,0,0,
    -1,0,0,
    0,1,0,
    0,-1,0,
    0,0,1,
    0,0,-1};

bool judge(int x,int y, int z){
    if(x>=a||x<0||y>=b||y<0||z>=c||z<0)
        return false;
    return true;
}

int BFS(){
    while(Q.empty()==false){
        State state = Q.front();
        Q.pop();
        int nx = state.x;
        int ny = state.y;
        int nz = state.z;
        int nt = state.t;
        for(int i=0;i<6;i++)
        {
            int x = nx+dir[i][0];
            int y = ny + dir[i][1];
            int z = nz + dir[i][2];
            if(judge(x,y,z)==false||mark[x][y][z]==true||maze[x][y][z]==1)
                continue;
            if(x==a-1&&y==b-1&&z==c-1)
                return nt+1;
            State tmp;
            tmp.x = x;
            tmp.y = y;
            tmp.z = z;
            tmp.t = nt+1;
            Q.push(tmp);
            
        }
    }
    return -1;
}
int main(){
    int K;
    cin>>K;
    while(K--){
        cin>>a>>b>>c>>t;
        for(int i=0;i<a;i++)
            for(int j=0;j<b;j++)
                for(int k=0;k<c;k++)
                {
                    cin>>maze[i][j][k];
                    mark[i][j][k]=false;
                }
        
        State tmp;
        tmp.x=tmp.y=tmp.z=0;
        tmp.t=0;
        mark[0][0][0]=true;
        while(Q.empty()!=true) Q.pop();
        Q.push(tmp);
        int ans = BFS();
        if(ans<=t)
            cout<<ans<<endl;
        else
            cout<<-1<<endl;
    }
    return 0;
}
```

在上述实现中，我们需要一个结构体来保存每一个状态。
其次，为了实现各个状态按照其被查找到的顺序依次转移扩展，我们需要使用一个队列。即将每次扩展得到的新状态放入队列中，待排在其之前的状态都被扩展完成后，
该状态才能得到扩展。
最后，为了防止对无效状态的搜索，我们需要一个标记数组mark[x][y][z],当已经得到过包含坐标（x,y,z)的状态后，即把mark[x][y][z]置为true，当下次再由某
状态扩展出包含该坐标的状态时，则直接丢弃，不对它做任何处理。

总结：我们通过状态之间的相互扩展完成在所有状态集合中的搜索，并查找需要的状态。利用这种手段，我们将原本对路径的搜索转化到了对状态的搜索上来。广度优先搜索
即对状态间的相互转移构成的解答树构成的按层次遍历。
