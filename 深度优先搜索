首先回顾一下广度优先搜索。在状态的转移和扩展构成的解答树中，广度优先搜索按照层次遍历的所有状态，直到找到我们需要的状态。

与其相对的，假如我们改变对解答树的遍历方式，改为优先遍历层次更深的状态，直到遇到一个状态节点，其不再拥有子树，则返回上一层，访问其未被访问过的子树，直至
解答树中所有的状态都被遍历完毕，这个过程，类似于树的前序遍历。

在搜索中，为了达到这一目的，我们立即扩展新得到的状态，而更早得到的状态则更迟得到扩展。在广度优先搜索中，使用队列来实现较早得到的状态较先得到扩展，这是
利用了队列先进先出的特性。那么，为了实现先得到的状态后得到扩展的效果，我们按理将使用堆栈保存和扩展搜索过程中得到的状态，但是同样也可以使用递归程序来实现。


由于缺少了广度搜索中按层次递增顺序遍历的特性，所以当深度优先搜索搜索到我们需要的状态时，其不再具有某种最优的特性。因此，在使用深度优先搜索时，我们更多的
是求解有或者没有的问题，即对解答树是否有我们需要的答案进行判定，而一般不使用深度优先搜索求解最优解问题。
