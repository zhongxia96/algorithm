搬寝室：
一共有n件物品，n是一个小于2000的整数，xhd决定随便搬2*k件过去就好了。每次xhd搬两件东西，左手一件，右手一件，并且每搬一次的疲劳度是和左右手的物品的
重量差的平方成正比。可怜的xhd想知道搬完这2*k件物品后的最佳状态是怎样的（也就是最低的疲劳度）。

输入数据有两行，第一行有两个整数 n,k,第二行有n个整数分别表示n件物品的重量（重量是一个小于2^15的正整数）。

题解：注意到任意选择一对物品，其累积的疲劳度为两个物品重量差的平方。所以，在选定的最优方案中，任选两对组合，其配对情况必为重量最大物品和重量次大物品为
一对，重量最小物品和重量次小物品为一对，不存在交叉组合情况。同时，当两个物品的重量差越小时，其差的平方也越小，所以每一对组合的两个物品重量，必为原物品
中重量相邻的一对物品。

综上所述，在选定的最优方案中，每对物品都是重量相邻的一对物品。

在得出这个结论后，我们设计该问题的状态，首先将所有物品按照重量递增排序，并由1到n编号。设dp[i][j]为在前j件物品中选择i对物品时的最小疲劳度，那么根据物品
j和物品j-1是否被配对选择，该状态有两个来源：若物品j和物品j-1未被配对选择，则物品j一定没被选择，所以dp[i][j]等于dp[i][j-1]；若物品j和物品j-1配对，
则dp[i][j]为dp[i-1][j-2]再加上这两件物品配对后产生的疲劳度，即前j-2件物品配成的i-1对再加上最后两件配成的一对物品，共得到i对物品。

初始时，dp[0][i](1=<i=<n)为0，即不选择任何一对物品，疲劳度为0.
综上所述，其状态转移方程为（设经过排序后第i件物品重量为list[i]):
dp[i][j]=min{dp[i][j-1],dp[i-1][j-2]+(list[j]-list[j-1])^2}
递推求出dp[k][n]即是所求。

最后，估计这种状态对应复杂度。状态数量为k*n，转移时间复杂度为O（1），综合时间复杂度为O（k*n).

```
#include <iostream>
#include <algorithm>
#include <math.h>

using namespace std;

int weight[2005];
int dp[1005][2005];

int main(){
    int n,m;
    cin>>n>>m;
    for(int i=1;i<=n;i++)
        cin>>weight[i];
    sort(weight, weight+n); //注意进行排序
    for(int i=0;i<=m;i++)
        for(int j=0;j<=n;j++)
            dp[i][j]=-1;
    for(int i=0;i<=n;i++)
        dp[0][i] = 0;
    for(int i=1;i<=m;i++)
        for(int j=2*i;j<=n;j++){
            if(dp[i-1][j-2]!=-1&&dp[i][j-1]!=-1){
                int a= dp[i-1][j-2]+pow((weight[j]-weight[j-1]), 2);
                int b = dp[i][j-1];
                dp[i][j] = max(a,b);
            }
            else if(dp[i-1][j-2]!=-1)
                dp[i][j] = dp[i-1][j-2]+pow(weight[j]-weight[j-1], 2);
            else
                dp[i][j] = dp[i][j-1];
        }
    cout<<dp[m][n]<<endl;
    return 0;
}
```
