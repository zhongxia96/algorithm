问题：
有一个容量为V的背包，和一些物品，这些物品分别有两个属性，体积W和价值v,每种物品只有1个。要求用这个背包装下价值尽可能多的物品，求该最大值，背包可以不被
装满。

分析：因为在最优解中，背包可以不被装满，每种物品都有两种可能的情况，即在背包中存在或者不存在（背包中有0个或者1个该物品），所以我们把这个问题称为0-1背包
问题。
在众多方案中求解最优解，是典型的动态规划问题，为了用动态规划来解决该问题，我们用dp[i][j]表示在总体积不超过j的情况下，前i件物品能达到的最大价值。
初始时，dp[0][j](0=<j=<=V)为0.

依据每种物品是否被放入背包，每个状态有两个状态转移的来源：

若物品i被放入背包，设其体积为w，价值为v，则dp[i][j]=dp[i-1][j-w]+v.即在总体积不超过j-w时前i-1件物品可组成最大价值的基础上再加上i物品的价值w.
若物品不加入背包，则dp[i][j]=dp[i-1][j],即此时与总体积不超过j的前i-1件物品组成的最大值等价。

选择他们之中较大的值成为状态dp[i][j]的值。

综上所述，0-1背包的状态转移方程为：
dp[i][j]=max{dp[i-1][j-w]+v, dp[i-1][j]};
转移时要注意，j-w的值是否为非负值，若为负则该转移来源不能被转移。

```
#include <iostream>
#include <algorithm>
#include <math.h>

using namespace std;

int weight[105];
int value[105];
int dp[105][1005];

int main(){
    int t,m;
    cin>>t>>m;
    for(int i=1;i<=m;i++){
        cin>>weight[i]>>value[i];
    }
    for(int i=0;i<=1000;i++)
        dp[0][i]=0;
    for(int i=1;i<=m;i++)
        for(int j=0;j<=t;j++)
        {   if(j>=weight[i])
                dp[i][j]=max(dp[i-1][j], dp[i-1][j-weight[i]]+value[i]);
            else
                dp[i][j]=dp[i-1][j];
        }
    cout<<dp[m][t]<<endl;
    
    return 0;
}
```

观察状态转移的特点，我们发现dp[i][j]的转移仅与dp[i-1][j-weight[i]]和dp[i-1][j]有关，仅与二维数组中本行的上一行有关。根据这个特点，我们可以将原本
的二维数组优化为一维，并用如下方式完成状态转移：
dp[j]=max{dp[j-weight[i]]+value[i], dp[j]};

为了保证状态的正确转移，我们必须保证在每次更新中确定状态dp[j]时，dp[j]和dp[j-weight[i]]尚未在本次更新修改。考虑到j-weight[i]<j,那么在每次更新中
倒序遍历所有的j值，就能保证在更新dp[j]的值时，dp[j-weight[i]]的值尚未被修改，从而完成正确的状态转移。

```
#include <iostream>
#include <algorithm>
#include <math.h>

using namespace std;

int weight[105];
int value[105];
int dp[1005];

int main(){
    int t,m;
    cin>>t>>m;
    for(int i=1;i<=m;i++){
        cin>>weight[i]>>value[i];
    }
    for(int i=0;i<=1000;i++)
        dp[i]=0;
    for(int i=1;i<=m;i++)
        for(int j=t;j>=0;j--)
        {   if(j>=weight[i])
                dp[j]=max(dp[j], dp[j-weight[i]]+value[i]);
        }
    cout<<dp[t]<<endl;
    
    return 0;
}
```
分析求解0-1背包问题的算法复杂度。其状态数量为n*s,其中n为物品的数量，s为背包的总容积，状态转移复杂度为O（1），所以综合时间复杂度为O（n*s).经过优化后的
空间复杂度仅为O（s)(不包括保存物品信息所需要的空间）。

牢记0-1背包的一个特点：每一件物品至多只能选择一件，即在背包中该物品数量只有0和1两种情况。

0-1背包存在一个简单的变化，即要求所选择的物品必须恰好装满背包。此时，我们设计新的状态dp[i][j]为前i件物品恰好体积总和为j时的最大价值，其状态转移与前文
所讲的0-1背包完全一致，而初始状态发生了变化。其初始状态变为dp[0][0]为0，而其他dp[0][j](前0件物品体积总量为j)值均变为负无穷或不存在，经状态转移后，
得出dp[n][s]即为答案。综上所述，该变化与原始的0-1背包的差别仅体现在初始值方面，其他步骤均保持不变。
















