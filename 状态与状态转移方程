回顾两种经典问题的算法模式，我们都先定义了一个数字量，如最长递增子序列中用dp[i]来表示以序列中第i个数字结尾的最长递增子序列长度和最长公共子序列中用
dp[i][j]表示的两个字符串中前i,j个字符的最长公共子序列，我们就是对这两个数字量不断求解最终得到答案的。这个数字量就被称为状态。
状态是描述问题当前状况的一个数字量。首先，它是数字的，是可以被抽象出来保存在内存中的。其次，它可以完全表示一个状态的特征，而不需要其他任何辅助信息。最后，
也是状态最重要的特点，状态间的转移完全依赖于各个状态本身，如最长递增子序列中，dp[x]的值由dp[i]（i<x)的值确定。
若在分析动态规划问题的时候能够找到这样一个符合以上所有条件的状态，那么多半这个问题是可以被正确解出的。
做DP问题的关键，就是找一个好的状态！！！

由此，我们把注意力放到状态的递推过程中来，由一个或多个旧的状态得出一个新的状态的过程，被称为状态的转移。
如最长公共子序列中，通过dp[i-1][j-1]或者dp[i][j-1]、dp[i-1][j]的值转移得出dp[i][j]的值就是该问题中的状态转移。而我们之前所说的数字量间的递推关系
被称为状态的转移规则，也被称为状态转移方程，确定状态的转移规则即确定了怎样由前序状态递推求出后序状态。

动态规划问题的时间复杂度由两部分组成：状态数量和状态转移复杂度
