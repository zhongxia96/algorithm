哈夫曼树是为叶子节点构造一棵带权路径长度和最小的二叉树；其中树中节点带有表示某种意义的权值，那么从根节点到达该节点的路径长度再乘以该节点的
权值被称为该节点的带权路径长度；树中所有叶结点的带权路径长度之和为该树的带权路径长度和。

哈夫曼树的求法：
（1）将所有节点放入集合K。
（2）若集合K中剩余节点大于两个，则取出其中权值最小的两个节点，构造他们同时为某个新节点的左右子节点，该新结点是他们的共同的双亲节点，设定他的
权值为其两个儿子节点的权值和。并将该父亲节点放入集合K。重复步骤（2）或（3）。
（3）若集合K中只剩余一个节点，该节点即为构造出的哈夫曼树的根节点，所有构造得到的中间节点（即哈夫曼树上非叶子节点）的权值和即为该哈夫曼树的
带权路径和。

为了快速的求得集合K中权值最小的两个元素，我们需要使用堆数据结构。他以O(logn)的复杂度取得n个元素中的最小元素。
可以使用模板库中的实现 priority_queue<int> Q;
但是这时默认建立一个大顶堆；但是在哈夫曼树中需要取得堆中最小的元素，可以使用如下语句建立一个小根堆：
priority_queue<int, vector<int>, greater<int>> Q;

基于上面的求法，每次合并一个节点进入哈夫曼树，并且每次求得最小元素地复杂度是o(logn),所以建立哈夫曼树的总体复杂度是O(nlogn).

学会求解哈夫曼树，还要学会在实际运用中确定哈夫曼树模型！

下面给出一个案例代码：
```
#include<iostream>
#include<queue>
#include<stdio.h>

using namespace std;

int main()
{
    int n;
    priority_queue<int, vector<int>, greater<int>> Q;
    while(cin>>n){
        while(Q.empty()==false) Q.pop();
        int val;
        for(int i=0;i<n;i++){
            cin>>val;
            Q.push(val);
        }
        int ans = 0;
        while(Q.size()>1){
            int a = Q.top();
            Q.pop();
            int b = Q.top();
            Q.pop();
            ans += a+b;
            Q.push(a+b);
        }
        cout<<ans<<endl;
    }
    return 0;
}
```
