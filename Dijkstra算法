Dijkstra算法只能求得某特定节点到其他所有节点的最短路径长度，即单源最短路路径问题。

按照最短路径长度递增的顺序确定每一个节点的最短路径长度，即先确定的节点的最短路径长度不大于后确定的结点的最短路径长度。

算法流程如下：
（1）初始化，集合K中加入节点1，节点1到节点1的最短距离为0，到其他节点为无穷（或不确定）。
（2）遍历与集合K中节点直接相邻的边（U，V，C），其中U属于集合K，V不属于集合K，计算由节点1出发按照已经得到的最短路到达U，再由U经过该边到达V时
的路径长度。比较所有与集合K中节点直接相邻的非集合K节点该路径长度，其中路径长度最小的节点被确定为下一个最短路径确定的节点，其最短路径长度即为
这个路径长度，最后将该节点加入集合K。
（3）若集合K中已经包含了所有的点，算法结束；否则重复步骤（2）。


时间复杂度为O(n^2)，若在查找最小值的处利用堆进行优化，则时间复杂度可以降到O(NlogN),N为节点个数。空间复杂度为O(N).不包括保存图所需要的空间。
